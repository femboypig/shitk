import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
import firebase_admin
from firebase_admin import credentials, firestore
import os
from datetime import datetime

# Initialize Firebase Admin
cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# States for conversation
AWAITING_NAME, AWAITING_EMAIL = range(2)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send welcome message and request user data if not registered."""
    user_id = str(update.effective_user.id)
    user_ref = db.collection('users').document(user_id)
    user_doc = user_ref.get()

    if not user_doc.exists:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ IDENTIFY!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å.\n"
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        )
        return AWAITING_NAME
    
    return await show_main_menu(update, context)

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's name input."""
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏:"
    )
    return AWAITING_EMAIL

async def handle_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's email input and complete registration."""
    email = update.message.text
    if not '@' in email or not '.' in email:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å."
        )
        return AWAITING_EMAIL

    user_id = str(update.effective_user.id)
    user_ref = db.collection('users').document(user_id)
    user_ref.set({
        'name': context.user_data['name'],
        'email': email,
        'telegram_id': user_id,
        'registered_at': datetime.now(),
        'last_active': datetime.now()
    })

    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {context.user_data['name']}!"
    )
    return await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show main menu."""
    keyboard = [
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='faq')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='delete_data')],
        [InlineKeyboardButton("üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
        [InlineKeyboardButton("üìã –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data='privacy')],
        [InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data='terms')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    return ConversationHandler.END

async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle FAQ section."""
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IDENTIFY?", callback_data='faq_start')],
        [InlineKeyboardButton("–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", callback_data='faq_delete')],
        [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º", callback_data='faq_login')],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks with error handling."""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == 'faq':
            await handle_faq(update, context)
        elif query.data == 'faq_start':
            await query.edit_message_text(
                "üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IDENTIFY:\n\n"
                "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ\n"
                "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π email\n"
                "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ IDENTIFY.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='faq')]])
            )
        elif query.data == 'faq_delete':
            await query.edit_message_text(
                "üóë –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç:\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'\n"
                "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
                "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='faq')]])
            )
        elif query.data == 'faq_login':
            await query.edit_message_text(
                "üîë –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Ö–æ–¥–æ–º:\n\n"
                "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email\n"
                "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π\n"
                "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å\n\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='faq')]])
            )
        elif query.data == 'delete_data':
            await delete_data(update, context)
        elif query.data == 'support':
            await handle_support(update, context)
        elif query.data == 'confirm_delete':
            user_id = str(update.effective_user.id)
            db.collection('deletion_requests').document(user_id).set({
                'user_id': user_id,
                'requested_at': datetime.now(),
                'status': 'pending'
            })
            await query.edit_message_text(
                "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—è—Ç.\n"
                "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            )
        elif query.data == 'back_to_main':
            await show_main_menu(update, context)
        elif query.data in ['privacy', 'terms']:
            urls = {
                'privacy': 'https://shitk-p.vercel.app/privacy',
                'terms': 'https://shitk-p.vercel.app/terms'
            }

            await query.edit_message_text(
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                f"üîó <a href='{urls[query.data]}'>{urls[query.data]}</a>",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error in callback handler: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle data deletion request."""
    user_id = str(update.effective_user.id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_token = os.urandom(16).hex()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Firebase
    db.collection('verification_tokens').document(user_id).set({
        'token': verification_token,
        'created_at': datetime.now(),
        'status': 'pending'
    })
    
    verification_url = f"https://shitk-p.vercel.app/verify?token={verification_token}&uid={user_id}"
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=verification_url)],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üîê –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ¬ª\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç IDENTIFY\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.",
        reply_markup=reply_markup
    )

async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle support request."""
    await update.callback_query.edit_message_text(
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
    )
    context.user_data['awaiting_support_message'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user messages."""
    if context.user_data.get('awaiting_support_message'):
        user_id = str(update.effective_user.id)
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()

        if not user_doc.exists:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return

        user_data = user_doc.to_dict()
        
        # Create support ticket without await
        ticket_ref = db.collection('support_tickets').document()
        ticket_ref.set({
            'user_id': user_id,
            'user_name': user_data.get('name'),
            'email': user_data.get('email'),
            'message': update.message.text,
            'created_at': datetime.now(),
            'status': 'open'
        })
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email."
        )
        context.user_data['awaiting_support_message'] = False
    else:
        await start(update, context)

def main():
    """Start the bot."""
    application = Application.builder().token('7623000540:AAHNX-KCHWXq6XIV54ruYlDAWKydvtsUc3g').build()


    # Add conversation handler for registration
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AWAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            AWAITING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email)],
        },
        fallbacks=[CommandHandler('cancel', start)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()
